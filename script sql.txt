-- ====================================================================
-- SCRIPT COMPLETO PARA LA BASE DE DATOS 'letterbox'
-- ====================================================================

-- ---
-- PASO 1: Creación y selección de la base de datos
-- ---
CREATE DATABASE IF NOT EXISTS letterbox;
USE letterbox;

-- ---
-- PASO 2: Borrado de tablas existentes para una instalación limpia
-- ---
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS usuarios;
DROP TABLE IF EXISTS pelis;

-- ---
-- PASO 3: Creación de las tablas principales
-- ---

-- Tabla para almacenar los datos de los usuarios
	CREATE TABLE usuarios (
		id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
		nombre_usuario VARCHAR(50) NOT NULL UNIQUE,
		password_hash VARCHAR(255) NOT NULL,
		fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	) COMMENT='Tabla para almacenar usuarios y sus credenciales.';

	-- Tabla para almacenar la información de las películas
	CREATE TABLE pelis (
		id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
		nombre VARCHAR(100) NOT NULL,
		director VARCHAR(100),
		anio INT,
		sinopsis TEXT,
		poster_url VARCHAR(255),
		puntuacion_promedio DECIMAL(3,2) NOT NULL DEFAULT 0.0
	) COMMENT='Tabla central que contiene la información de cada película.';

	-- Tabla para almacenar las reviews que conectan usuarios y películas
	CREATE TABLE reviews (
		id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
		pelicula_id INT NOT NULL,
		usuario_id INT NOT NULL,
		puntuacion INT NOT NULL COMMENT 'Puntuación del 1 al 5',
		comentario TEXT,
		fecha_review TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (pelicula_id) REFERENCES pelis(id) ON DELETE CASCADE,
		FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE,
		CONSTRAINT chk_puntuacion CHECK (puntuacion >= 1 AND puntuacion <= 5)
	) COMMENT='Tabla de unión para las calificaciones de los usuarios a las películas.';

	-- ---
	-- PASO 4: Inserción de datos iniciales
	-- ---
	INSERT INTO pelis (nombre, puntuacion_promedio, anio, director) VALUES
	('Django Unchained', 4.5, 2012, 'Quentin Tarantino'),
	('Star Wars: Episode IV - A New Hope', 4.2, 1977, 'George Lucas'),
	('Nueve reinas', 4.8, 2000, 'Fabián Bielinsky'),
	('The Naked Gun', 4.0, 1988, 'David Zucker'),
	('Esperando la carroza', 4.9, 1985, 'Alejandro Doria');

	-- ---
	-- PASO 5: Creación de Triggers para validación de datos
	-- ---
	DROP TRIGGER IF EXISTS validar_puntuacion_min;
	DROP TRIGGER IF EXISTS validar_puntuacion_max;

	DELIMITER //

	CREATE TRIGGER validar_puntuacion_min
	BEFORE UPDATE ON pelis
	FOR EACH ROW
	BEGIN
		IF NEW.puntuacion_promedio < 0.0 THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'El puntaje promedio no puede ser menor a 0.';
		END IF;
	END //

	CREATE TRIGGER validar_puntuacion_max
	BEFORE UPDATE ON pelis
	FOR EACH ROW
	BEGIN
		IF NEW.puntuacion_promedio > 5.0 THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'El puntaje promedio no puede ser mayor a 5.';
		END IF;
	END //

	DELIMITER ;

	-- ---
	-- PASO 6: Creación de Procedimientos Almacenados (Stored Procedures)
	-- ---
	DROP PROCEDURE IF EXISTS sp_registrar_usuario;
	DROP PROCEDURE IF EXISTS sp_filtrar_pelis_por_nombre;
	DROP PROCEDURE IF EXISTS sp_agregar_review;

	DELIMITER //

	-- Procedimiento para registrar un nuevo usuario
	CREATE PROCEDURE sp_registrar_usuario(
		IN p_nombre_usuario VARCHAR(50),
		IN p_password_hash VARCHAR(255)
	)
	BEGIN
		INSERT INTO usuarios (nombre_usuario, password_hash)
		VALUES (p_nombre_usuario, p_password_hash);
	END //

	-- Procedimiento para buscar películas por nombre
	CREATE PROCEDURE sp_filtrar_pelis_por_nombre(
		IN p_nombre_pelicula VARCHAR(100)
	)
	BEGIN
		SELECT 
			id,
			nombre,
			director,
			anio,
			puntuacion_promedio,
			sinopsis,
			poster_url
		FROM 
			pelis
		WHERE 
			nombre LIKE CONCAT('%', p_nombre_pelicula, '%');
	END //

	-- Procedimiento para añadir una review y actualizar el promedio de la película
	CREATE PROCEDURE sp_agregar_review(
		IN p_usuario_id INT,
		IN p_pelicula_id INT,
		IN p_puntuacion INT,
		IN p_comentario TEXT
	)
	BEGIN
		DECLARE nuevo_promedio DECIMAL(3,2);

		-- Inserta la nueva review
		INSERT INTO reviews (usuario_id, pelicula_id, puntuacion, comentario)
		VALUES (p_usuario_id, p_pelicula_id, p_puntuacion, p_comentario);
		
		-- Calcula el nuevo promedio de puntuación para esa película
		SELECT AVG(r.puntuacion) INTO nuevo_promedio
		FROM reviews r 
		WHERE r.pelicula_id = p_pelicula_id;
		
		-- Actualiza la puntuación promedio en la tabla 'pelis'
		UPDATE pelis
		SET puntuacion_promedio = nuevo_promedio
		WHERE id = p_pelicula_id;
		
		-- Devuelve la película actualizada como confirmación
		SELECT * FROM pelis WHERE id = p_pelicula_id;
	END //

	DELIMITER ;

select * from reviews
select * from pelis

-- ====================================================================
-- FIN DEL SCRIPT
-- ====================================================================

-- Ejemplo de uso (opcional, para probar)
-- CALL sp_filtrar_pelis_por_nombre('star');